#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// int main()
// {
//     int a = 16;
//     int b = a >> 1;
//     printf("b = %d\n",b);

//     return 0;
// }
//源码 反码 补码
// 100000000000000000001 - 源码
// 111111111111111111110 - 反码
// 111111111111111111111 - 补码

// int my_strlen(char* str)
// {
//     char* start = str;
//     char* end = str;
//     while(*end != '\0')
//     {
//         end++;
//     }
//     return end - start;
// }

// int main()
// {
//     char arr[] = "bit";
//     int len = my_strlen(arr);
//     printf("%d\n",len);
//     return 0;
// }
// int main()
// {
//     int arr[10]={0};
//     printf("%p\n",arr);//数组首地址
//     printf("%p\n",arr+1);//
//     printf("%p\n",&arr[0]);//数组首地址
//     printf("%p\n",&arr[0]+1);
//     printf("%p\n",&arr);//数组地址
//     printf("%p\n",&arr + 1);
//     return 0;
// }
//指针数组
// int main()
// {
//     int a = 1;
//     int b = 2;
//     int c = 3;
//     int* arr[3] = {&a,&b,&c};
//     int i = 0;
//     for(i=0;i<3;i++)
//     {
//         printf("%d ",(*arr[i]));
//     }
//     return 0;
// // }
// int string_len(char *arr)
// {
//     int count = 0;
//     while (*arr != '\0')
//     {
//         count++;
//         arr++;
//     }
//     return count;
// }
// void reverse_string(char arr[])
// {
//     int sz = string_len(arr)-1;
//     printf("%d\n",sz);
//     char* left = &arr[0];
//     char* right = &arr[sz];
//     while (left<=right)
//     {
//         int tmp = *left;
//         *left = *right;
//         *right = tmp;
//         left++;
//         right--;
//     }

// }
// void reverse_string(char arr[])
// {
//     char tmp = arr[0];
//     int len = string_len(arr);
//     arr[0] = arr[len-1];
//     arr[len-1] = '\0';
//     if(string_len(arr+1)>=2)
//         {
//             reverse_string(arr+1);
//         }
//     arr[len-1]= tmp;
// }
// int main()
// {
//     char arr[] = "abcdefghljk";

//     reverse_string(arr);
//     printf("%s\n",arr);
//     return 0;

// }
//一个数的几次方是多少
// double pow(int n, int k)
// {
//     if(k<0)
//         return (1.0 /pow(n,-k));
//     else if (k>0)
//         return n*pow(n,k-1);
//     else
//         return 1;

// }
// int main()
// {
//     int k = 0;
//     int n = 0;
//     scanf("%d%d",&n,&k);
//     double ret = pow(n,k);
//     printf("%f\n",ret);
//     return 0;
// }


// 求0——100000之间的水仙花数，水仙花数：153=1^3+5^3+3^3

// int count_n(int i)
// {
//     int count = 0;

//     if (i != 0)
//     {
//         while (i)
//         {
//             i = i / 10;
//             count++;
//         }
//     }
//     else
//         return 1;
//     return count;
// }
// int square(int j, int ret)
// {
//     int js = 1;
//     while (ret)
//     {
//         js = js * j;
//         ret--;
//     }
//     return js;
// }

// int sum_square(int i, int ret)
// {
//     int sum = 0;
//     int re = 0;
//     while (i)
//     {
//         re = i % 10;
//         sum = sum + square(re, ret);
//         i = i / 10;
//     }
//     return sum;
// }

// void number_shui(int i)
// {
//     int j = 0;
//     for (j = 0; j <= i; j++)
//     {
//         int ret = count_n(j);
//         int sum = 0;
//         if (j == sum_square(j, ret))
//             printf("%d ", j);
//     }
// }

// int main()
// {
//     int i = 10000;
//     number_shui(i);
//     return 0;
// }


//打印图

// int main()
// {
//     int i = 0;
//     int line = 0;
//     scanf("%d",&line);
//     for ( i = 0; i < line; i++)
//     {
//         int j = 0;
        
//         for ( j = 0; j < line-i-1; j++)
//         {
//             printf(" ");
//         }
        
//         for ( j = 0; j < 2 * i +1; j++)
//         {
//             printf("*");
//         }
        
//         printf("\n");

//     }
//     for ( i = 0; i < line-1; i++)
//     {
//         int j = 0;
//         for ( j = 0; j <= i; j++)
//         {
//             printf(" ");
//         }
//         for ( j = 0; j < 2*line-3-2*i; j++)
//         {
//             printf("*");
//         }
//         printf("\n");        
//     }
    
   
    
    
//     return 0;
// }

//结构体
// typedef struct str
// {
//     char name[20];
//     int age[5];

// }str;

// int main()
// {
//     str s1;

// }
//整型提升
// int main()
// {
//     char a = -1;
//     signed char b = -1;
//     unsigned char c = -1;
//     printf("a=%d,b=%d,c=%d",a,b,c);
//     return 0;

// }
//有符号位，左边补最左边(符号位)的数字，无符号位补0

// int main()
// {
//     char a = -128;
//     printf("%u\n",a);
//     return 0;
// }
//有符号的char 的范围位-128-127

// #include<windows.h>
//  int main()
//  {
//      unsigned int i;
//      for(i = 9; i >= 0; i--)
//      {
//          printf("%u\n",i);
//          Sleep(1000);
//      }
//      return 0;
//  }
// int main()
// {
//     char a[1000];
//     int i;
//     for(i = 0; i < 1000; i++)
//     {
//         a[i] = -1 - i ;

//     }
//     printf("%d\n",strlen(a));
//     return 0;
// }
// char i = 0;
// int main()
// {
//     for(i = 0; i < 127; i++)
//     {
//         printf("hello world\n");
//     }
//     return 0;
// }
//
// float浮点类型 E为一个无符号数，包括8位、11位，其范围为0-255；
// 0-2047 ； 32位加127， 64位加1023
// int main()
// {
//     float f = 5.5;
//     //5.5
//     //101.1
//     //(-1)^0 *1.011*2^2
//     //s = 0
//     //m = 1.011
//     //e = 2
//     //0100 0000 1011 0000 0000 0000 0000 0000
//     //0x40b000000
//     return 0;
// }
// E取出来时有三种情况
// E 不全为0
// E 全为0 接近零
// E 全为1 无穷大

//指针
// void test(int arr[])
// {
//     int sz = sizeof(arr)/sizeof(arr[0]);
//     printf("%d\n",sz);
// }
// int main()
// {
//     int arr[10] = {0};
//     test(arr);
//     return 0;
// }
// int main()
// {
//     char arr[] = "abcdef";
//     char* pc = &arr[5];

//     printf("%p\n",arr+1);
//     printf("%p\n",&arr+1);
//     return 0;
// }
// int main()
// {
//     char arr1[] = "abcd";
//     char arr2[] = "abcd";
//     char *pc = "abcd";
//     char *pa = "abcd";
//     if (arr1 == arr2)
//     {
//         printf("hah");
//     }
//     else
//     {
//         printf("heh");
//     }
//     if (pc == pa)
//     {
//         printf("HH");
//     }
//     else
//     {
//         printf("hh");
//     }

//     return 0;
// }
//数组指针
// int main
// {
//     char* arr[5];
//     char* (*pa)[5] = &arr;
// }
// void print(int (*p)[5], int x, int y)
// {
//     int i = 0;
//     for (i = 0; i < x; i++)
//     {
//         int j = 0;
//         for (j = 0; j < y; j++)
//         {
//             // printf("%d ", (*(p+i))[j]);
//             printf("%d ", p[i][j]);
//             printf("%d ", *(p[i] + j));
//             printf("%d ", *(*(p + i)) + j);
//         }
//         printf("\n");
//     }
// }
// int main()
// {
//     int arr[3][5] = {{1, 2, 3, 4, 5}, {2, 3, 4, 5, 6}, {3, 4, 5, 6, 7}};
//     print(arr, 3, 5);
// }
// int main()
// {
//     //字符指针
//     char ch = 'w';
//     char* p = &ch;
//     const char* p2 = "abcdef";
//     //指针数组
//     // int* p3;
//     // char *p;
//     int arr2[5];
//     int (*pa)[5] = &arr2;

//     return 0;
// }

// void print(char* str)
// {
//     printf("%s\n",str);
// }
// int main()
// {
//     void (*p)(char*)=print;
//     (*p)("hello bit");
//     return 0;
// }
//函数指针的数组
// void div(int)
// {

//     return 0;
// }
// int main()
// {
//     int* arr[5];
//     int (*pa)(int,int)=Add;
//     int (*pa[5])(int,int)={Add}
//     return 0;
// }

// char* my_strcpy(char* dest, const char* srs);
// 1、写一个函数指针pf，能够指向my—strcpy
// 2、写一个函数指针数组pfarr，能存放my_strcpy四个指针
// 1：char* (*pf) (char*,const char*)
// 2: char* (*pfarr[4]) (char*,const chat*)

//函数指针数组应用，计算器
// int add(int a ,int b)
// {
//     return a + b;
// }
// int sub(int a ,int b)
// {
//     return a - b;
// }
// int mul(int a ,int b)
// {
//     return a * b;
// }
// int Div(int a ,int b)
// {
//     return a / b;
// }
// void menu()
// {
//     printf("-----1、add---2、sub------\n");
//     printf("-----3、mul---4、div------\n");
//     printf("-----0、exit--------------\n");
// }

// int main()
// {
//     int (*pr[])(int,int) = {0,add,sub,mul,Div};
//     int a = 0;
//     int b = 0;
//     int i = 0;
//     do
//     {

//     menu();
//     printf("请输入计算方法\n");
//     scanf("%d",&i);
//     if (i>0&&i<5)
//     {
//         printf("请输入要计算的数字\n");
//         scanf("%d%d",&a,&b);
//         int ret = (*pr[i])(a,b);
//         printf("计算结果为：%d\n",ret);
//     }
//     else if (i == 0)
//     {
//         printf("退出\n");
//     }
//     else
//     {
//         printf("输入错误，请从新输入\n");
//     }

//     } while (i);

//     return 0;
// }

// void* 可以接受任意指针
// 不能解引用操作
// 不能进行加减乘除运算

// qsort 函数解析

// struct stu
// {
//     char name[30];
//     int age;
// };

// // 整形比较
// int compare_int(const void *e1, const void *e2)
// {
//     return *(int *)e1 - *(int *)e2;
// }

// int test_1()
// {
//     int arr[] = {0,1,3,2,5,4,9,7,8,6};
//     int sz = sizeof(arr)/sizeof(arr[0]);
//     qsort(arr,sz,sizeof(arr[0]),compare_int);
//     int i = 0;
//     for(i = 0; i <9; i++)
//     {
//         printf("%d ",arr[i]);
//     }

//     return 0;
// }

//浮点型比较
// int compare_float(const void*e1,const void*e2)
// {
//     return ((int)(*(double*)e1 - *(double*)e2));
// }
// int test_2()
// {
//     double arr[] = {0.0,1.0,3.0,2.0,5.5,4.4,9.5,8.7,6.6,7.8};
//     int sz = sizeof(arr)/sizeof(arr[0]);
//     qsort(arr,sz,sizeof(arr[0]),compare_float);
//     int i = 0;
//     for(i = 0; i <10; i++)
//     {
//         printf("%f ",arr[i]);
//     }

//     return 0;
// }

// 结构体比较

// int compare_struct_name(const void*e1,const void*e2)
// {
//     return strcmp((*(struct stu*)e1).name,(*(struct stu*)e2).name);
// }

// int compare_struct_age(const void*e1,const void*e2)
// {
//     return (*(struct stu*)e1).age - (*(struct stu*)e2).age;
// }

// // int test_3()
// // {
// //     struct stu s[3] = {{"zhangsan",25},{"lisi",35},{"wanger",15}};
// //     int sz = sizeof(s)/sizeof(s[0]);
// //     qsort(s,sz,sizeof(s[0]),compare_struct_name);
// //     int i = 0;
// //     for(i = 0; i <3; i++)
// //     {
// //         printf("%d ",s[i].age);
// //         printf("%s ",s[i].name);
// //     }
// //     return 0;
// // }

// // qsort
// // 第一个参数：待排序数组的首元素地址
// // 第二个参数：待排序数组的元素个数
// // 第三个参数：单个元素所占字节大小
// // 第四个参数：函数指针。比较两个元素的所用函数地址-这个函数使用者自己实现
// // 函数的两个参数，待比较的两个元素的地址

// //冒泡排序
// void swap(char *arr, char *crr, int width)
// {
//     int i = 0;
//     for (i = 0; i < width; i++)
//     {
//         int tmp = *arr;
//         *arr = *crr;
//         *crr = tmp;
//         arr++;
//         crr++;
//     }
// }


// void bubble_sort(void *arr, int sz, int width, int (*compare)(const void *e1, const void *e2))
// {
//     int i = 0;
//     int j = 0;
//     for (i = 0; i < sz; i++)
//     {
//         for (j = 0; j < sz - 1 - i; j++)
//         {
//             if (compare((char *)arr + j * width, (char *)arr + (j + 1) * width) > 0)
//             {
//                 swap((char *)arr + j * width, (char *)arr + (j + 1) * width, width);
//             }
//         }
//     }
// }

// int test_5()
// {
//     int arr[10] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
//     int sz = sizeof(arr) / sizeof(arr[0]);
//     bubble_sort(arr, sz, sizeof(arr[0]), compare_int);
//     int i = 0;
//     for (i = 0; i < 10; i++)
//     {
//         printf("%d ", arr[i]);
//     }
//     return 0;
// }


// int test_6()
// {
//     struct stu s[3] = {{"zhangsan",25},{"lisi",35},{"wanger",15}};
//     int sz = sizeof(s)/sizeof(s[0]);
//     bubble_sort(s,sz,sizeof(s[0]),compare_struct_age);
//     int i = 0;
//     for(i = 0; i <3; i++)
//     {
//         printf("%d ",s[i].age);
//         printf("%s ",s[i].name);
//     }
//     return 0;
// }

// int main()
// {
//     // test_5();
//     test_6();
//     return 0;
// }
// 数组名是首元素地址
// 1、sizeof（数组名）-表示整个数组
// 2、&数组名-数组名表示整个数组

// int main()
// {
//      int money = 0;
//      int total = 0;
//      int empty = 0;
//      scanf("%d",&money);
//      //买回来的汽水
//      total = money;
//      empty = money;
//      //换回来的汽水
//      while (empty>=2)
//      {
//         total += empty / 2;
//         empty = empty / 2 + empty % 2;
//      }
//      printf("%d",total);
//      return 0;
     
// }
